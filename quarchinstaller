#!/bin/bash
### vitamins/archinstaller + archmind script 2.1
###preview version

declare -r VERSION='0.test-preview'

# colors
unset ALL_OFF GREEN RED
ALL_OFF='\e[1;0m'
GREEN='\e[1;32m'
RED='\e[1;31m'
readonly ALL_OFF GREEN RED

# functions
# {{{
config_fail() {
printf "$RED"
printf '%s\n' "| Error in variable ${1}."
printf "$ALL_OFF"
exit 1
}

fail() {
printf "$RED"
printf '%s\n' "| Error, ${1}."
printf "$ALL_OFF"
exit 1
}

# wait 2 seconds for the user to read the message, if confirm is set to yes
message() {
printf "${RED}\n"
printf '%s\n' '| archinstaller:'
printf '%s\n' "| ${1}"
printf "${ALL_OFF}\n"
[[ "$confirm" = 'yes' ]] && sleep 2
return 0
}

check_conf() {
printf "$RED"
printf '%s\n' '| Checking configuration..'
printf "$ALL_OFF"
# confirm
[[ "$confirm" = 'yes' || "$confirm" = 'no' ]] || config_fail 'confirm'
# edit_conf
if [[ "$edit_conf" = 'yes' ]]; then
	type "$EDITOR" > /dev/null || config_fail 'EDITOR'
else
	[[ "$edit_conf" = 'no' ]] || config_fail 'edit_conf'
fi
# unmount
[[ "$unmount" = 'yes' || "$unmount" = 'no' ]] || config_fail 'unmount'
# manual_part
if [[ "$manual_part" = 'yes' ]]; then
	mountpoint -q /mnt || fail 'no mounted filesystem found at target /mnt'
	[[ -z "$cmdline" ]] && config_fail 'cmdline'
	if [[ "$bootloader" = 'grub' && "$uefi" = 'no' ]]; then
		# dest_disk
		[[ -z "$dest_disk" ]] && config_fail 'dest_disk'
		## check if dest_disk is really a disk
		[[ $(lsblk -dno TYPE "$dest_disk") = 'disk' ]] || config_fail 'dest_disk'
	fi
else
	[[ "$manual_part" = 'no' ]] || config_fail 'manual_part'
	# dest_disk
	[[ -z "$dest_disk" ]] && config_fail 'dest_disk'
	## check if dest_disk is really a disk
	[[ $(lsblk -dno TYPE "$dest_disk") = 'disk' ]] || config_fail 'dest_disk'
	# check /mnt for availability
	mountpoint -q /mnt && fail 'working directory /mnt is blocked by mounted filesystem'
	# check dest_disk for mounted filesystems
	mount | grep "$dest_disk" > /dev/null &&
	 fail 'found mounted filesystem on destination disk'
	# swap
	if [[ "$swap" = 'yes' ]]; then
		## swap_size
		[[ -z "$swap_size" ]] && config_fail 'swap_size'
		[[ "$swap_size" =~ ^[0-9]+[K,M,G,T]$ ]] || config_fail 'swap_size'
	else
		[[ "$swap" = 'no' ]] || config_fail 'swap'
	fi
	# root_size
	if [[ "$root_size" = '0' ]]; then
		[[ "$home" = 'no' ]] || config_fail 'home'
	else
		[[ -z "$root_size" ]] && config_fail 'root_size'
		[[ "$root_size" =~ ^[0-9]+[K,M,G,T]$ ]] || config_fail 'root_size'
	fi
	# home
	if [[ "$home" = 'yes' ]]; then
		## home_size
		if [[ "$home_size" != '0' ]]; then
			[[ -z "$home_size" ]] && config_fail 'home_size'
			[[ "$home_size" =~ ^[0-9]+[K,M,G,T]$ ]] || config_fail 'home_size'
		fi
		## encrypt_home
		if [[ "$encrypt_home" = 'yes' ]]; then
			[[ -z "$cryptsetup_options" ]] && config_fail 'cryptsetup_options'
		else
			[[ "$encrypt_home" = 'no' ]] || config_fail 'encrypt_home'
		fi
	else
		[[ "$home" = 'no' ]] || config_fail 'home'
	fi
	# fstype
	## check if mkfs utilities are installed
	## set options for overwriting existing filesystems
	case "$fstype" in
		btrfs)	type mkfs.btrfs > /dev/null || fail 'missing package: btrfs-progs'
			packages+=( 'btrfs-progs' )
			mkfs_options="$fstype";;
		ext2|ext3|ext4)
			type mkfs.ext4 > /dev/null || fail 'missing package: e2fsprogs'
			mkfs_options="${fstype} -q";;
		f2fs)	type mkfs.f2fs > /dev/null || fail 'missing package: f2fs-tools'
			packages+=( 'f2fs-tools' )
			mkfs_options="$fstype";;
		jfs)	type mkfs.jfs > /dev/null || fail 'missing package: jfsutils'
			mkfs_options="${fstype} -q";;
		nilfs2)	type mkfs.nilfs2 > /dev/null || fail 'missing package: nilfs-utils'
			packages+=( 'nilfs-utils' )
			mkfs_options="${fstype} -f -q";;
		reiserfs)
			type mkfs.reiserfs > /dev/null || fail 'missing package: reiserfsprogs'
			mkfs_options="${fstype} -q";;
		xfs)	type mkfs.xfs > /dev/null || fail 'missing package: xfsprogs'
			mkfs_options="${fstype} -f -q";;
		*)	config_fail 'fstype';;
	esac
fi
# uefi
if [[ "$uefi" = 'yes' ]]; then
	## check if install host is booted in uefi mode
	if [[ -z "$(mount -t efivarfs)" ]]; then
		mount -t efivarfs efivarfs /sys/firmware/efi/efivars > /dev/null ||
		 config_fail 'uefi'
	fi
	efivar -l > /dev/null || config_fail 'uefi'
	## bootloader
	[[ "$bootloader" = 'grub' || "$bootloader" = 'gummiboot' ]] || config_fail 'bootloader'
	if [[ "$manual_part" = 'no' ]]; then
		type mkfs.vfat > /dev/null || fail 'missing package: dosfstools'
	fi
	[[ -z "$esp_size" ]] && config_fail 'esp_size'
	[[ "$esp_size" =~ ^[0-9]+[K,M,G,T]$ ]] || config_fail 'esp_size'
else
	[[ "$uefi" = 'no' ]] || config_fail 'uefi'
	## bootloader
	[[ "$bootloader" = 'syslinux' || "$bootloader" = 'grub' ]] || config_fail 'bootloader'
	# boot_size
	[[ -z "$boot_size" ]] && config_fail 'boot_size'
	[[ "$boot_size" =~ ^[0-9]+[K,M,G,T]$ ]] || config_fail 'boot_size'
fi
# mirror
## online status is checked after internet connection was tested successfully
[[ -z "$mirror" ]] && config_fail 'mirror'
[[ "$mirror" =~ /$ ]] || config_fail 'mirror'
# locale
[[ -z "$locale" ]] && config_fail 'locale'
## enforce UTF-8
[[ "$locale" =~ ^[a-z]{2,3}_[A-Z]{2}(.UTF-8)?\ UTF-8$ ]] || config_fail 'locale'
# keymap
[[ -z "$keymap" ]] && config_fail 'keymap'
localectl --no-pager list-keymaps | grep -x "$keymap" > /dev/null || config_fail 'keymap'
# font
[[ -z "$font" ]] && config_fail 'font'
# timezone
[[ -z "$timezone" ]] && config_fail 'timezone'
timedatectl --no-pager list-timezones | grep -x "$timezone" > /dev/null || config_fail 'timezone'
# hardware_clock
[[ "$hardware_clock" = 'utc' || "$hardware_clock" = 'localtime' ]] || config_fail 'hardware_clock'
# hostname
[[ -z "$hostname" ]] && config_fail 'hostname'
[[ "$hostname" =~ ^[a-z0-9][a-z0-9-]*[a-z0-9]$ ]] || config_fail 'hostname'
# network
case "$network" in
	no|dhcpcd|ifplugd)	;;
	netctl)	[[ -z "$netctl_profile" ]] && config_fail 'netctl_profile'
		[[ -s ./"$netctl_profile" ]] || config_fail 'netctl_profile';;
	*)	config_fail 'network';;
esac
# hooks
[[ -z "$hooks" ]] && configure_hooks='no' || configure_hooks='yes'
# set_password
if [[ "$set_password" = 'yes' ]]; then
	## root password
	[[ -z "$root_password" ]] && ask_root_password='yes' || ask_root_password='no'
else
	[[ "$set_password" = 'no' ]] || config_fail 'set_password'
fi
# add_user
if [[ "$add_user" = 'yes' ]]; then
	## username
	[[ -z "$username" ]] && config_fail 'username'
	[[ "$username" =~ ^[a-z_][a-z0-9_-]*[$]?$ ]] || config_fail 'username'
	## user password
	if [[ "$set_password" = 'yes' ]]; then
		[[ -z "$user_password" ]] && ask_user_password='yes' || ask_user_password='no'
	fi
else
	[[ "$add_user" = 'no' ]] || config_fail 'add_user'
fi

# no config_fail beyond this point
printf "$GREEN"
printf '%s\n' '| OK.'
printf "$ALL_OFF"
}

ask_confirm() {
printf "$RED"
printf '%s\n' '---------------------------------------'
if [[ "$manual_part" = 'no' ]]; then
	printf '%s\n' 'The following drive will be formatted.'
	lsblk -o NAME,TYPE,MODEL,SIZE,FSTYPE "$dest_disk"
else
	printf '%s\n' 'The following filesystems are targeted.'
	findmnt -l -o TARGET,SOURCE -R /mnt
fi
printf '%s\n' '---------------------------------------'
printf "$ALL_OFF"
local answer='x'
while [[ "$answer" != 'Y' ]]; do
	printf '%s' 'Continue? (Y/n) '
	read -n 2 -r answer
	[[ "$answer" = 'n' ]] && fail 'script cancelled'
	printf '\n'
done
}

make_part() {
# prepare disk
message 'Preparing disk..'
sgdisk -Z "$dest_disk"
dd bs=1K count=1024 iflag=nocache oflag=direct if=/dev/zero of="$dest_disk"
wipefs -a "$dest_disk"
blockdev --rereadpt "$dest_disk"; sync; blockdev --rereadpt "$dest_disk"

# partitioning
message 'Creating partitions..'

## partition layout
if [[ "$uefi" = 'yes' ]]; then
	# first partition is ESP
	if [[ "$swap" = 'yes' ]]; then
		swap_num=2
		root_num=3
		home_num=4
	else
		root_num=2
		home_num=3
	fi
else
	if [[ "$bootloader" = 'grub' ]]; then
		# first partition is BIOS boot
		if [[ "$swap" = 'yes' ]]; then
			boot_num=2
			swap_num=3
			root_num=4
			home_num=5
		else
			boot_num=2
			root_num=3
			home_num=4
		fi
	else
		if [[ "$swap" = 'yes' ]]; then
			boot_num=1
			swap_num=2
			root_num=3
			home_num=4
		else
			boot_num=1
			root_num=2
			home_num=3
		fi
	fi
fi

## EFI system partition
if [[ "$uefi" = 'yes' ]]; then
	sgdisk -n 1:0:+"$esp_size" -t 1:EF00 "$dest_disk"
	sleep 1
else
	## BIOS boot partition
	if [[ "$bootloader" = 'grub' ]]; then
		sgdisk -n 1:0:+1007K -t 1:EF02 "$dest_disk"
		sleep 1
	fi
	## boot partition
	sgdisk -n "$boot_num":0:+"$boot_size" -t "$boot_num":8300 "$dest_disk"
	sleep 1
fi

## swap partition
if [[ "$swap" = 'yes' ]]; then
	sgdisk -n "$swap_num":0:+"$swap_size" -t "$swap_num":8200 "$dest_disk"
	sleep 1
fi

## root partition
sgdisk -n "$root_num":0:+"$root_size" -t "$root_num":8300 "$dest_disk"
sleep 1

## home partition
if [[ "$home" = 'yes' ]]; then
	sgdisk -n "$home_num":0:+"$home_size" -t "$home_num":8300 "$dest_disk"
fi

# create and mount filesystems
## root
message 'Formatting root..'
mkfs.${mkfs_options} "$dest_disk""$root_num"
message 'Mounting root..'
mount -t "$fstype" "$dest_disk""$root_num" /mnt

## ESP
if [[ "$uefi" = 'yes' ]]; then
	message 'Formatting ESP..'
	mkfs.vfat -F32 "$dest_disk"1
	mkdir -p /mnt/boot
	message 'Mounting ESP..'
	mount -o nodev,nosuid,noexec -t vfat "$dest_disk"1 /mnt/boot
else
	message 'Formatting /boot..'
	mkfs.ext2 -q "$dest_disk""$boot_num"
	mkdir -p /mnt/boot
	message 'Mounting /boot..'
	mount -o nodev,nosuid,noexec -t ext2 "$dest_disk""$boot_num" /mnt/boot
fi

## swap
if [[ "$swap" = 'yes' ]]; then
	message 'Formatting swap..'
	mkswap "$dest_disk""$swap_num"
	swapon "$dest_disk""$swap_num"
fi

## home
if [[ "$home" = 'yes' ]]; then
	if [[ "$encrypt_home" = 'yes' ]]; then
		## encrypt home
		modprobe dm_mod
		## overwrite partition with zeroes
		message 'Setting up Encryption. Secure erasure of partition..'
		dd bs=4M iflag=nocache oflag=direct if=/dev/zero of="$dest_disk""$home_num" || sync
		## map physical partition to LUKS
		message 'Please enter a new encryption passphrase.'
		cryptsetup ${cryptsetup_options} luksFormat "$dest_disk""$home_num"
		## open encrypted volume
		message 'To unlock the container, enter the passphrase again.'
		cryptsetup open --type luks "$dest_disk""$home_num" home
		message 'Formatting /home..'
		mkfs.${mkfs_options} /dev/mapper/home
		mkdir /mnt/home
		message 'Mounting /home..'
		mount -o nodev,nosuid -t "$fstype" /dev/mapper/home /mnt/home
	else
		message 'Formatting /home..'
		mkfs.${mkfs_options} "$dest_disk""$home_num"
		mkdir /mnt/home
		message 'Mounting /home..'
		mount -o nodev,nosuid -t "$fstype" "$dest_disk""$home_num" /mnt/home
	fi
fi
}

pacman_install() {
pacman --noconfirm --needed -r /mnt --cachedir=/mnt/var/cache/pacman/pkg -S $@
}

install_xorg() {
message 'Installing xorg packages..'
pacman_install xorg-server xorg-server-utils xorg-xinit

configure_system() {
message 'Configuring system..'

if [[ "$manual_part" = 'yes' ]]; then
	# crypttab
	# check if there are any encrypted containers opened before editing crypttab
	if [[ "$edit_conf" = 'yes' && -n "$(dmsetup ls --target crypt)" ]]; then
		"$EDITOR" /mnt/etc/crypttab
		clear
	fi
	# mdadm.conf
	if [[ -e /proc/mdstat ]] && grep '^md' /proc/mdstat > /dev/null; then
		mdadm -Ds >> /mnt/etc/mdadm.conf
		if [[ "$edit_conf" = 'yes' ]]; then
			"$EDITOR" /mnt/etc/mdadm.conf
			clear
		fi
	fi
else
	# crypttab
	if [[ "$home" = 'yes' && "$encrypt_home" = 'yes' ]]; then
		local home_uuid=$(lsblk -dno UUID "$dest_disk""$home_num")
		printf '%s\n' "home UUID=${home_uuid} none luks,timeout=60s" >> /mnt/etc/crypttab
		if [[ "$edit_conf" = 'yes' ]]; then
			"$EDITOR" /mnt/etc/crypttab
			clear
		fi
	fi
fi

# fstab
genfstab -U -p /mnt > /mnt/etc/fstab
if [[ "$edit_conf" = 'yes' ]]; then
	"$EDITOR" /mnt/etc/fstab
	clear
fi
# locale
[[ "$locale" = 'en_US.UTF-8 UTF-8' ]] || printf '%s\n' 'en_US.UTF-8 UTF-8' >> /mnt/etc/locale.gen
printf '%s\n' "$locale" >> /mnt/etc/locale.gen
printf '%s\n' "LANG=${locale%% *}" > /mnt/etc/locale.conf
arch-chroot /mnt locale-gen

# console font and keymap
cat << EOF > /mnt/etc/vconsole.conf
KEYMAP=${keymap}
FONT=${font}
EOF

# timezone
ln -s /usr/share/zoneinfo/"$timezone" /mnt/etc/localtime

# hardware clock
hwclock --adjfile=/mnt/etc/adjtime -w --"$hardware_clock"

# kernel modules
if [[ "$configure_modules" = 'yes' ]]; then
	for m in ${k_modules[@]}; do
		printf '%s\n' "$m" >> /mnt/etc/modules-load.d/modules.conf
	done
fi

# hostname
printf '%s\n' "$hostname" > /mnt/etc/hostname
sed -i '/^127.0.0.1/ s/$/\t'"$hostname"'/' /mnt/etc/hosts

# network service
if [[ "$network" != 'no' ]]; then
	## fix wired network interface name to eth0
	touch /mnt/etc/udev/rules.d/80-net-setup-link.rules
	case "$network" in
		dhcpcd)	systemctl -q --root=/mnt enable dhcpcd@eth0.service;;
		ifplugd)
			pacman_install ifplugd
			systemctl -q --root=/mnt enable netctl-ifplugd@eth0.service;;
		netctl)	cp ./"$netctl_profile" /mnt/etc/netctl
			arch-chroot /mnt netctl enable "$netctl_profile";;
	esac
fi

#  mkinitcpio
if [[ "$configure_hooks" = 'yes' || "$edit_conf" = 'yes' ]]; then
	cp /mnt/etc/mkinitcpio.conf /tmp/mkinitcpio.conf
	if [[ "$configure_hooks" = 'yes' ]]; then
		sed -i '/^HOOKS="/ c \HOOKS="'"$hooks"'"' /mnt/etc/mkinitcpio.conf
	fi
	if [[ "$edit_conf" = 'yes' ]]; then
		"$EDITOR" /mnt/etc/mkinitcpio.conf
		clear
	fi
	## only regenerate if modified
	cmp -s /mnt/etc/mkinitcpio.conf /tmp/mkinitcpio.conf || arch-chroot /mnt mkinitcpio -p linux
	rm -f /tmp/mkinitpcio.conf
fi

# root password
if [[ "$set_password" = 'yes' ]]; then
	if [[ "$ask_root_password" = 'yes' ]]; then
		message 'Setting password for root user..'
		## loop if entered passwords do not match
		while :; do
			if passwd -R /mnt root; then
				break
			else
				(( "$?" == 10 )) || break
			fi
		done
	else
		printf '%s\n' "root:${root_password}" | chpasswd -R /mnt
	fi
fi

# add user
if [[ "$add_user" = 'yes' ]]; then
	useradd -R /mnt -m -g users -s /bin/bash "$username"
	## set user password
	if [[ "$set_password" = 'yes' ]]; then
		if [[ "$ask_user_password" = 'yes' ]]; then
			message "Setting password for ${username}.."
			while :; do
				if passwd -R /mnt "$username"; then
					break
				else
					(( "$?" == 10 )) || break
				fi
			done
		else
			printf '%s\n' "${username}:${user_password}" | chpasswd -R /mnt
		fi
	fi
fi
}

install_bootloader() {
message 'Installing bootloader..'
if [[ "$uefi" = 'yes' ]]; then
	# UEFI
	if [[ "$bootloader" = 'grub' ]]; then
		## install grub package
		pacman_install dosfstools efibootmgr grub

		## configure grub
		if [[ "$manual_part" = 'yes' ]]; then
			sed -i '/^GRUB_CMDLINE_LINUX_DEFAULT="/ s/quiet/'"$cmdline"'/' \
/mnt/etc/default/grub
		fi
		if [[ "$edit_conf" = 'yes' ]]; then
			"$EDITOR" /mnt/etc/default/grub
			clear
		fi

		## run grub-mkconfig and grub-install
		printf '%s\n' 'grub-mkconfig -o /boot/grub/grub.cfg; grub-install \
--target=x86_64-efi --efi-directory=/boot --bootloader-id=arch_grub --recheck' | arch-chroot /mnt
	else
		## install gummiboot package
		pacman_install gummiboot
		## run gummiboot install
		arch-chroot /mnt gummiboot install

		## configure gummiboot
		cat << EOF > /mnt/boot/loader/loader.conf
default arch
timeout 5
EOF
		if [[ "$manual_part" = 'no' ]]; then
			local root_partuuid=$(lsblk -dno PARTUUID "$dest_disk""$root_num")
			local cmdline="root=PARTUUID=${root_partuuid} rw"
		fi
		cat << EOF > /mnt/boot/loader/entries/arch.conf
title	Arch Linux
linux	/vmlinuz-linux
initrd	/initramfs-linux.img
options	${cmdline}
EOF
		if [[ "$edit_conf" = 'yes' ]]; then
			"$EDITOR" /mnt/boot/loader/entries/arch.conf
			clear
		fi
	fi
else
	# BIOS
	if [[ "$bootloader" = 'syslinux' ]]; then
		## install syslinux package
		pacman_install gptfdisk syslinux

		## run syslinux-install_update
		arch-chroot /mnt syslinux-install_update -i -a -m

		## configure syslinux
		if [[ "$manual_part" = 'no' ]]; then
			local root_partuuid=$(lsblk -dno PARTUUID "$dest_disk""$root_num")
			local cmdline="root=PARTUUID=${root_partuuid} rw"
		fi
		cat << EOF > /mnt/boot/syslinux/syslinux.cfg
PROMPT 1
TIMEOUT 50
DEFAULT arch

LABEL arch
	LINUX ../vmlinuz-linux
	APPEND ${cmdline}
	INITRD ../initramfs-linux.img

LABEL archfallback
	LINUX ../vmlinuz-linux
	APPEND ${cmdline}
	INITRD ../initramfs-linux-fallback.img
EOF
		if [[ "$edit_conf" = 'yes' ]]; then
			"$EDITOR" /mnt/boot/syslinux/syslinux.cfg
			clear
		fi
	else
		## install grub package
		pacman_install grub

		## configure grub
		if [[ "$manual_part" = 'yes' ]]; then
			sed -i '/^GRUB_CMDLINE_LINUX_DEFAULT="/ s/quiet/'"$cmdline"'/' \
/mnt/etc/default/grub
		fi
		if [[ "$edit_conf" = 'yes' ]]; then
			"$EDITOR" /mnt/etc/default/grub
			clear
		fi

		## run grub-mkconfig and grub-install
		printf '%s\n' "grub-mkconfig -o /boot/grub/grub.cfg; grub-install \
--target=i386-pc --recheck ${dest_disk}" | arch-chroot /mnt
	fi
fi
}
# }}}

# parse commandline
# {{{
if (( "$#" > 0 )); then
	(( "$#" > 1 )) && fail 'too many arguments'
	if [[ "$1" = '-v' || "$1" = '--version' ]]; then
		cat << EOF
archinstaller ${VERSION}
Copyright (C) 2014 Dennis Anfossi, Lukas B.
License GPLv2
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Written by Dennis Anfossi & Lukas B.
EOF
		exit 0
	elif [[ "$1" = '-h' || "$1" = '--help' ]]; then
		cat << EOF
Run without arguments to start the installer.
  -h  --help        display this help and exit
  -v  --version     output version information and exit
For the complete documentation see README.
EOF
		exit 0
	else
		fail "invalid option ${1}"
	fi
fi
# }}}

# test requirements
# {{{
# check root user id
[[ "$EUID" = '0' ]] || fail 'please run as root user'

# check arch linux
[[ -e /etc/arch-release ]] || fail 'please run on arch linux'

# arch-install-scripts required
type pacstrap > /dev/null || fail 'missing package: arch-install-scripts'
# gdisk required
type gdisk > /dev/null || fail 'missing package: gptfdisk'
# }}}

# set defaults
# {{{
confirm='yes'
edit_conf='yes'
unmount='yes'
manual_part='no'
esp_size='512M'
boot_size='128M'
cryptsetup_options='-qy -c aes-xts-plain64 -h sha1 -s 256'

# EDITOR defaults to nano if environment variable EDITOR is unset
[[ -z "$EDITOR" ]] && EDITOR='nano'
# }}}

# check if configuration file is in the current working directory
[[ -s ./ari.conf ]] || fail "configuration file ari.conf not found in $(pwd)"

printf "$RED"
cat << EOF
---------------------------------------
          archinstaller ${VERSION}
---------------------------------------
EOF
printf "$ALL_OFF"

# source configuration file
source ./ari.conf

# check configuration
check_conf

# load package list from file pkglist.txt
[[ -s ./pkglist.txt ]] && packages+=( $( < ./pkglist.txt ) )

# avoid errors due to "set -u" and unset variable
## packages
[[ -z "$packages" ]] && install_packages='no' || install_packages='yes'
## kernel modules
[[ -z "$k_modules" ]] && configure_modules='no' || configure_modules='yes'

# check internet connection
printf "$RED"
printf '%s\n' '| Checking internet connection..'
curl -f --retry 3 -m 10 -o /dev/null -s http://mirrors.kernel.org ||
 fail 'please check the internet connection'
printf "$GREEN"
printf '%s\n' '| OK.'
printf "$ALL_OFF"

# check mirror status
if [[ "$mirror" != 'keep' ]]; then
	curl -f --retry 3 -m 10 -o /dev/null -s "$mirror"lastsync ||
 fail 'please check the mirror status and configuration'
fi

# paranoid shell
set -e -u

# ask for confirmation
[[ "$confirm" = 'yes' ]] && ask_confirm
# create partitions & filesystems, mount filesystems
[[ "$manual_part" = 'no' ]] && make_part

# mirror
if [[ "$mirror" != 'keep' ]]; then
	mirror='Server = '"$mirror"'$repo/os/$arch'
	printf '%s\n' "$mirror" > /etc/pacman.d/mirrorlist
fi

# pacstrap base packages
message 'Installing base system..'
pacstrap /mnt base

# install xorg packages
[[ "$xorg" = 'yes' ]] && install_xorg

######noob experience
#!/bin/bash
##
####
clear
echo "Starting. . .

Premere un tasto per continuare oppure \"e\" per uscire"
read -n1 a
a=`echo $a | tr '[A-Z]' '[a-z]'`
if [ "$a" = "e" ]; then
    clear
    exit 0
fi
######00######
clear
echo"Scegliere su che ambiente andremo ad operare:

     1.Home Desktop / Workstation
     2.Pentesting

     Scegliendo 1, avrete la possibilità di costruire il vostro ambiente desktop archlinux
     Scegliendo 2, avrete la posiibilità di installare BlackArch

    Digitare scelta e poi premere invio"

read scelta
case $scelta in
  '1') echo""
  ;;
  '2') echo " è stato scelto di installare BlackArch, premere invio per continuare"
        curl -O http://blackarch.org/strap.sh
        ./strap.sh
        exit 0
  ;;
esac
clear
##### 11 #######
clear
echo "INSTALLARE DRIVER SCHEDA VIDEO---------------11

E' indispensabile l'installazione di un driver per la scheda video se si vuole usare l'interfaccia grafica. Potete installare i soli driver della scheda che possiedi.
L'installazione della scheda video può creare problemi (soprattutto con ATI e SIS), leggere in caso di problemi il wiki di arch
ATTENZIONE:Per installare i driver proprietari,è necessario un procedimento più complesso rispetto a quelli liberi.Per questo ora si potranno installare solo i liberi
(ad eccezione dei driver nvidia per le serie GeForce 6 e superiori).Per installare i proprietari,in caso di bisogno,consultare il wiki di Arch dopo l'installazione.

 1) per scheda video intel (liberi)
 2) per scheda video ATI (liberi)
 3) per scheda video Nvidia (liberi)
 4) per scheda video Nvidia (proprietari.ATTENZIONE:SOLO serie GeForce 6 e superiori [NV40 e nuovi] )
 5) per scheda video SIS (supporto incerto)
 6) per scheda video savage

INFORMAZIONI AVANZATE
Verranno installati i seguenti pacchetti:

1)'xf86-video-intel' e 'lib32-intel-dri'
2)'xf86-video-ati' e 'lib32-ati-dri'
3)'xf86-video-nouveau' e 'lib32-nouveau-dri'
4)'nvidia' e 'lib32-nvidia-utils'
5)'xf86-video-sis'
6)'xf86-video-savage'


Digitare il numero corrispondente all'alternativa scelta e Premere invio per installarla oppure Premere \"j\" e \"invio\"
per saltare questo passaggio  "
read scelta

case $scelta in
#installazione dei vari driver
    '1')
        pacman -S xf86-video-intel --needed
        pacman -S lib32-intel-dri  --needed
        echo ""
    ;;
    '2')
        pacman -S xf86-video-ati  --needed
        pacman -S lib32-ati-dri   --needed
        echo ""
    ;;
    '3')
        pacman -S xf86-video-nouveau --needed
        pacman -S lib32-nouveau-dri  --needed
        echo ""
    ;;
    '4')
        pacman -S nvidia    --needed
        pacman -S lib32-nvidia-utils --needed
        echo ""
    ;;
    '5')
        pacman -S xf86-video-sis --needed
        echo ""
    ;;
    '6')
        pacman -S xf86-video-savage --needed
        echo ""
    ;;

    'j')
        echo ""
    ;;
    *)
        echo ""
    ;;
esac

read -p "Premere invio per continuare"

##### 12 #######
clear
echo "INSTALLARE DRIVER TOUCHPAD E CONFIGURARE TOUCHPAD---------------12
Il computer è dotato di touchpad? Occorre installare synaptics.

1)Installare synaptics
2)Installare synaptic e abilitare lo scrolling verticale del touchpad
In questo modo potrai usare il touchpad e,se hai scelto l'alternativa 2 e se il tuo touchpad lo supporta, lo scrolling verticale del touchpad

INFORMAZIONI AVANZATE
Verrà installato il pacchetto 'synaptics' e , nel caso della scelta '2', verranno aggiunte delle strinche a /etc/X11/xorg.conf.d/10-synaptics.conf

Digitare il numero corrispondente all'alternativa scelta e Premere invio per installarla oppure Premere \"j\" e \"invio\"
per saltare questo passaggio  "


read scelta

case $scelta in
    '1')
        pacman -S xf86-input-synaptics --needed   #installazione di synaptics
        echo ""
    ;;
    '2')
	pacman -S xf86-input-synaptics --needed
	echo "Section \"InputClass\"
        Identifier \"touchpad catchall\"
        Driver \"synaptics\"
        MatchIsTouchpad \"on\"
        MatchDevicePath \"/dev/input/event*\"
        Option \"TapButton1\" \"1\"
        Option \"TapButton2\" \"2\"
        Option \"TapButton3\" \"3\"
	Option \"VertEdgeScroll\" \"on\"
EndSection" | tee /etc/X11/xorg.conf.d/10-synaptics.conf #abilitazone dello scrolling verticale
        echo ""
    ;;
    'j')
        echo ""
    ;;
    *)
        echo ""
    ;;
esac
read -p "Premere invio per continuare"

######### 13 ########
clear
echo "INSTALLARE YAOURT---------13
Vuoi installare Yaourt per la gestione dei pacchetti presenti in AUR?
AUR (Arch User Repository) è un repository gestito dagli utenti,non ufficiale, (simile ai ppa di ubuntu)
Grazie a yaourt si potranno installare facilmente pacchetti presenti in quel repository.
Da ora in poi,lo script si comporterà come se yaourt fosse installato.Se si salta questo passaggio,non si potranno eseguire diverse parti dello script.

INFORMAZIONI AVANZATE
Verrà aggiunto il repo 'archlinuxfr' a /etc/pacman.conf e da li sarà installato il pacchetto 'yaourt'
Premere un tasto per continuare oppure \"j\" per saltare il passaggio."

read -n1 a
a=`echo $a | tr '[A-Z]' '[a-z]'`
if [ "$a" != "j" ]; then
echo "
[archlinuxfr]
Server = http://repo.archlinux.fr/\$arch" | tee -a /etc/pacman.conf #Aggiunta del repo "archlinuxfr"

pacman -Syy                                  #aggiornamento repository

pacman -S yaourt --needed                        #installazione di yaourt

read -p "Premere un tasto per continuare"
fi

############## AVVISO ####################
clear

echo "AVVISO
D'ora in poi,spesso verrà usato il tool 'yaourt' per scaricare e installare da AUR.

L'opzione '--noconfirm'permette di evitare le moltissime richieste di conferma da parte di yaourt,che talvolta sono davvero fastidiose.
Mettere l'opzione --noconfirm quindi aumenta notevolmente la comodità di yaourt, ma va contro i principi 'K.I.S.S.' di Arch,in quanto  non permette di modificare i file di installazione dei vari tool al momento del download (cosa necessaria un numero irrisorio di volte,comunque).

Si è scelto quindi di far scegliere all'utente se usare tale opzione o meno ,in tutti i  passaggi.
Quando sarà possibile usare l'opzione \"noconfirm\",verrete avvisati.Sarà necessario aggiungere 'a' alla scelta, ad esempio '1a'

ATTENZIONE: gli apici (' ') NON vanno messi.Quindi non si digiterà \"'1a'\" ma \"1a\" (senza gli apici).Gli apici sono usati quindi solo per evidenziare delle parti del testo e NON vanno digitati.
Premere un tasto per continuare."

read -n1 a
a=`echo $a | tr '[A-Z]' '[a-z]'`
if [ "$a" != "j" ]; then
echo "
     Grazie per l'attenzione"
read -p "Premere un tasto per continuare"
fi

####14 Scelta Desktop
clear
echo " Scegliere Ambiente Desktop

     1.Xfce
     2.KDE
     3.Gnome

Digita scelta e premere invio."
read desktop
if [ $desktop = 1 ];
  then
  echo "Xfce è disponibile:

        1.completo
        2.medio
        3.minimale
        4.xfce core

INFORMAZIONI AGGIUNTIVE (pacchetti installati)

1.completo: xfce4 gnome-icon-theme fortune-mod dbus gamin xfce4-goodies gvfs gvfs-afc thunar-volman #2
2.medio: xfce4 gnome-icon-theme fortune-mod dbus gamin gvfs gvfs-afc thunar-volman #1
3.minimale: xfce4
4.xfce-core: xfwm4 xfce4-panel xfdesktop thunar xfce4-session xfce4-settings xfce4-appfinder xfce-utils xfconf
I pacchetti 'gvfs gvfs-afc thunar-volman' provengono da AUR
Digitare un opzione e premere invio ....."
read subdesktop
case $subdesktop in
    '1') pacman -S xfce4 gnome-icon-theme fortune-mod dbus gamin xfce4-goodies --needed
       yaourt -S gvfs gvfs-afc thunar-volman --needed
       echo "exec dbus-launch --exit-with-session startxfce4" | tee /home/${nome_utente}/.xinitrc
       pacman -S slim archlinux-themes-slim --needed
       systemctl enable slim.service  #con "enable", i login manager vengono lanciati all'avvio del sistema in automatico.
       echo ""
  ;;
    '2') pacman -S xfce4 gnome-icon-theme fortune-mod dbus gamin --needed
        yaourt -S gvfs gvfs-afc thunar-volman --needed
        echo "exec dbus-launch --exit-with-session
        startxfce4" | tee /home/${nome_utente}/.xinitrc
        pacman -S slim archlinux-themes-slim --needed
        systemctl enable slim.service  #con "enable", i login manager vengono lanciati all'avvio del sistema in automatico.
        echo ""
   ;;
    '3') pacman -S xfce4 --needed
         echo "exec dbus-launch --exit-with-session startxfce4" | tee /home/${nome_utente}/.xinitrc
         echo ""
         pacman -S slim archlinux-themes-slim --needed
         systemctl enable slim.service  #con "enable", i login manager vengono lanciati all'avvio del sistema in automatico.
         echo ""
   ;;
    '4') Pacman -S xfwm4 xfce4-panel xfdesktop thunar xfce4-session xfce4-settings xfce4-appfinder xfce-utils xfconf #i "core packages" di xfce
         echo "exec dbus-launch --exit-with-session startxfce4" | tee /home/${nome_utente}/.xinitrc
         pacman -S slim archlinux-themes-slim --needed
         systemctl enable slim.service  #con "enable", i login manager vengono lanciati all'avvio del sistema in automatico.
         echo ""
         ;;
         'j')
             echo ""
         ;;
         *)
             echo ""
         ;;
      esac
read -p "Premere invio per continuare"
elif [ $desktop = 2 ];
  then
  echo"Kde è disponibile

        1.completo
        2.medio
        3.minimale

INFORMAZIONI AGGIUNTIVE (pacchetti installati)

        1.completo: plasma-meta kde-l10n-it kde-applications-meta
        2.medio: plasma-meta kde-l10n-it
        3.minimale: kdebase phonon-gstreamer xorg-xinit xorg-server-utils mesa
        "
read subdesktop
case $subdesktop in
  '1') pacman -S plasma-meta kde-l10n-it kde-applications-meta
  echo " exec startkde" | tee /home/${nome_utente}/.xinitrc
  pacman -S kdebase-workspace archlinux-themes-kdm  --needed
  systemctl enable kdm.service
  echo ""
      ;;
    '2') pacman -S plasma-meta kde-l10n-it
    echo " exec startkde" | tee /home/${nome_utente}/.xinitrc
    pacman -S kdebase-workspace archlinux-themes-kdm  --needed
    systemctl enable kdm.service
    echo ""
    ;;
        '3') pacman -S kdebase phonon-gstreamer xorg-xinit xorg-server-utils mesa
    echo " exec startkde" | tee /home/${nome_utente}/.xinitrc
    pacman -S kdebase-workspace archlinux-themes-kdm  --needed
    systemctl enable kdm.service
    echo ""
    ;;
    *)
        echo ""
    ;;
esac
read -p "Premere invio per continuare"

elif [ $desktop = 3 ]; then
    echo"Gnome è disponibile:

        1. completa
        2. minimale

        INFORMAZIONI AGGIUNTIVE (pacchetti)
        completa: gnome gnome-extra gnome-tweak-tool
        minimale: gnome

        Digitare il numero corrispondente all'alternativa scelta e Premere invio per installarla"
read subdesktop
case $subdesktop in
  '1')pacman -S gnome gnome-extra gnome-tweak-tool
  echo "exec gnome-session" | tee /home/${nome_utente}/.xinitrc
  pacman -S gdm
  systemctl enable gdm.service
  echo ""
  ;;
  '2') pacman -S gnome --needed
  echo "exec gnome-session" | tee /home/${nome_utente}/.xinitrc
  pacman -S gdm
  systemctl enable gdm.service
  echo ""
  ;;
  *)
   echo ""
    ;;
esac
  else
  echo "si è deciso di non installare nessun desktop environment o si è verificato un errore"
fi
#########XX########
clear
#####15
echo "INSTALLARE GKSU---------------15
E' consigliata l'installazione di gksu se si avrà intenzione di usare programmi di GNOME (gtk)

Gksu è un interfaccia grafica a sudo per i programmi GTK,ed è sempre consigliato lanciare programmi gtk con gksu invece che con il normale sudo.
Per KDE esiste 'kdesu' ma non è necessario installarlo,in quanto è installato di default in un'installazione di KDE.

INFORMAZIONI AVANZATE
Verra installato il pacchetto 'gksu'

Premere un tasto per continuare oppure \"j\" per saltare il passaggio."

read -n1 a
a=`echo $a | tr '[A-Z]' '[a-z]'`
if [ "$a" != "j" ]; then
pacman -S gksu --needed

read -p "Premere un tasto per continuare"
fi

#########16########
clear
echo "INSTALLARE CONTROLLO DISPOSITIVI RIMOVIBILI E DEVICE---------16
Vuoi installare gli strumenti per la gestione dei dispositivi rimovibili e dei devices interni?

INFORMAZIONI AVANZATE
Verranno installati i pacchetti 'polkit-use-wheel-group polkit desktop-privileges polkit-kde'

Premere un tasto per continuare oppure \"j\" per saltare il passaggio."


read -n1 a
a=`echo $a | tr '[A-Z]' '[a-z]'`
if [ "$a" != "j" ]; then
yaourt -S  polkit-use-wheel-group polkit desktop-privileges polkit-kde --needed
### assolutamente da rivedere
read -p "Premere un tasto per continuare"
fi

#########17########
clear
echo "INSTALLARE FONTS TTF-DEJAVU---------17
Vuoi installare i fonts ttf-dejavu?
I font dejavu sono un insieme di font di alta qualità

INFORMAZIONI AVANZATE
Verrà installato il pacchetto 'ttf-dejavu'
Premere un tasto per continuare oppure \"j\" per saltare il passaggio."
read -n1 a
a=`echo $a | tr '[A-Z]' '[a-z]'`
if [ "$a" != "j" ]; then

yaourt -S ttf-dejavu --needed

read -p "Premere un tasto per continuare"
fi

######### 18 ########
#INSTALLARE PACCHETTI PER APPLICAZIONE DI STAMPA
clear
echo "INSTALLAZIONE PROGRAMMI PER LA STAMPA----------------18

Verranno ora installati i pacchetti essenziali per la stampa e per la stampa su file pdf.
Successivamente sarà necessario configurare cups e cups-pdf secondo la guida del wiki di Arch

1)Si usa gnome,xfce e si vuole far avviare cups a ogni avvio del sistema
2)Si usa KDE e si vuole far avviare cups a ogni avvio del sistema
3)Si usa gnome,xfce, e NON si vuole far avviare cups a ogni avvio del sistema
4)Si usa KDE e  NON si vuole far avviare cups a ogni avvio del sistema

INFORMAZIONI AVANZATE
Verranno installati i pacchetti

1)cups gutenprint cups-pdf system-config-printer-common system-config-printer-gnome foomatic-{db,db-engine} a2ps ghostscript gsfonts cups-usblp
2)kdeadmin-kuser cups gutenprint system-config-printer cups-pdf kdeutils-printer-applet kdeadmin-system-config-printer-kde

e verrà dato il comando 'systemctl enable cups.serivice' per far avviare cups ad ogni avvio.
Con la scelta 3 verranno installati gli stessi pacchetti della scelta 1  e con la scelta 4 gli stessi della scelta 2, ma in questi ultimi due casi (3 e 4) cups NON verrà avviato
ad ogni avvio del sistema.
Molti pacchetti provengono da AUR

Digitare il numero corrispondente all'alternativa scelta e Premere invio per installarla oppure Premere \"j\" e \"invio\"
per saltare questo passaggio.Per usare l'opzione 'noconfirm' di yaourt,aggiungere 'a' alla scelta (es. '1a')"

read scelta
case $scelta in
    '1')
        yaourt -S cups gutenprint cups-pdf system-config-printer-common system-config-printer-gnome foomatic-{db,db-engine} a2ps ghostscript gsfonts cups-usblp --needed
        systemctl enable cups.service
        echo ""
    ;;
    '2')
        yaourt -S kdeadmin-kuser cups gutenprint system-config-printer cups-pdf kdeutils-printer-applet kdeadmin-system-config-printer-kde --needed
        systemctl enable cups.service
        echo ""
   ;;
   '3')
       yaourt -S cups gutenprint cups-pdf system-config-printer-common system-config-printer-gnome foomatic-{db,db-engine} a2ps ghostscript gsfonts cups-usblp --needed
        echo ""
    ;;
    '4')
         yaourt -S kdeadmin-kuser cups gutenprint system-config-printer cups-pdf kdeutils-printer-applet kdeadmin-system-config-printer-kde --needed
    ;;
    '1a')
        yaourt -S cups gutenprint cups-pdf system-config-printer-common system-config-printer-gnome foomatic-{db,db-engine} a2ps ghostscript gsfonts cups-usblp --needed --noconfirm
        systemctl enable cups.service
        echo ""
    ;;
    '2a')
        yaourt -S kdeadmin-kuser cups gutenprint system-config-printer cups-pdf kdeutils-printer-applet kdeadmin-system-config-printer-kde --needed --noconfirm
        systemctl enable cups.service
        echo ""
   ;;
   '3a')
       yaourt -S cups gutenprint cups-pdf system-config-printer-common system-config-printer-gnome foomatic-{db,db-engine} a2ps ghostscript gsfonts cups-usblp --needed --noconfirm
        echo ""
    ;;
    '4a')
         yaourt -S kdeadmin-kuser cups gutenprint system-config-printer cups-pdf kdeutils-printer-applet kdeadmin-system-config-printer-kde --needed --noconfirm
    ;;
    'j')
        echo ""
    ;;
    *)
        echo ""
    ;;
esac
read -p "Premere un tasto per continuare"
##########19 ###########

clear
echo "INSTALLAZIONE SOFTWARE PER LO SCANNER-------------19
Verranno installati i pacchetti essenziali per il funzionamento degli scanner.
Se non possiede uno scanner,  può saltare questo passaggio.
Verranno installati i seguenti pacchetti: sane e simple-scan oppure scan e skanlite (per KDE)

1)Si vogliono i pacchetti dello scanner per XFCE,GNOME.
2)Si vogliono i pacchetti dello scanner per KDE

INFORMAZIONI AVANZATE
Verranno installati i pacchetti
1) sane simple-scanner
2)sane skanlite
skanlite proviene da AUR

Digitare il numero corrispondente all'alternativa scelta e Premere invio per installarla oppure Premere \"j\" e \"invio\"
per saltare questo passaggio.Per usare l'opzione 'noconfirm' di yaourt, digitare '2a'"

read scelta

case $scelta in
    '1')
        pacman -S sane simple-scan  --needed
        echo ""
    ;;
    '2')
        yaourt -S sane skanlite --needed

        echo ""
   ;;
     '2a')
        yaourt -S sane skanlite --needed --noconfirm

        echo ""
   ;;
    'j')
        echo ""
    ;;
    *)
        echo ""
    ;;
esac
read -p "Premere un tasto per continuare"

########## 20 ###############
# INSTALLARE DRIVER DELLE STAMPANTI PIÙ COMUNI
clear
echo "INSTALLAZIONE DRIVER STAMPANTI--------------20

Potete scegliere di installare i driver della stampante che possedete. Per le Brother è possibile che il driver installato non sia quello corretto.
La miglior soluzione è una ricerca su arch wiki.I seguenti driver non valgono per le stampanti di rete.

 1) per stampanti HP
 2) per stampanti Samsung
 3) per stampanti Brother (hl2130)
 4)Per stampanti HP della serie 'LaserJet' come la 1018

 INFORMAZIONI AVANZATE
 Verranno installati i pacchetti

 1)hplip
 2)splix samsung_cms
 3)brother-hl2130
 4)foo2zjs

I pacchetti brother-hl2130 e foo2zjs provengono da AUR

Digitare il numero corrispondente all'alternativa scelta e Premere invio per installarla oppure Premere \"j\" e \"invio\"
per saltare questo passaggio.Per usare l'opzione 'noconfirm' di yaourt, digitare '3a' o '4a' a seconda se si vuole la scelta '3' o '4' "
read scelta
case $scelta in
    '1')
        pacman -S hplip --needed
        echo ""
    ;;
    '2')
        yaourt -S splix samsung_cms --needed
        echo ""
    ;;
    '3')
        yaourt -S brother-hl2130 --needed
        echo ""
    ;;
    '4')
        yaourt -S foo2zjs  --needed
        echo ""
    ;;
    '3a')
        yaourt -S brother-hl2130 --needed --noconfirm
        echo ""
    ;;
    '4a')
        yaourt -S foo2zjs  --needed --noconfirm
        echo ""
    ;;
    'j')
        echo ""
    ;;
    *)
        echo ""
    ;;
esac
read -p "Premere un tasto per continuare"
########## 21 ###############
# INSTALLARE PACCHETTI DI GRAFICA
clear
echo "INSTALLAZIONE SOFTWARE---------------21

Desideri installare i programmi solitamente presenti nella sezione \"grafica\", quali gestore immagini, visualizzatore immagini, visualizzatore pdf etc...?

1)Installare pacchetti per XFCE
2)Installare pacchetti per GNOME
3)Installare pacchetti per KDE

INFORMAZIONI AVANZATE

Verranno installati i seguenti pacchetti:shotwell evince ristretto per XFCE
Verranno installati i seguenti pacchetti:shotwell evince eye-of-gnome per GNOME
Verranno installati i seguenti pacchetti:digkam gwenview okular per KDE
Alcuni pacchetti provengono da AUR

Digitare il numero corrispondente all'alternativa scelta e Premere invio per installarla oppure Premere \"j\" e \"invio\"
per saltare questo passaggio.Per usare l'opzione 'noconfirm' di yaourt, aggiungere 'a' alla scelta (es. '1a')"

read scelta
case $scelta in
    '1')
        yaourt -S shotwell evince ristretto  --needed
        echo ""
    ;;
    '2')
        yaourt -S shotwell evince eog eog-plugins --needed
        echo ""
      ;;
    '3')
        yaourt -S digikam kipi-plugins kdegraphics-gwenview kdegraphics-okular --needed
        echo ""
    ;;

    '1a')
        yaourt -S shotwell evince ristretto  --needed --noconfirm
        echo ""
    ;;
    '2a')
        yaourt -S shotwell evince eog eog-plugins --needed --noconfirm
        echo ""
    ;;
    '3a')
        yaourt -S shotwell evince gpicview --needed --noconfirm
        echo ""
    ;;
    '4a')
        yaourt -S digikam kipi-plugins kdegraphics-gwenview kdegraphics-okular --needed --noconfirm
        echo ""
    ;;

 'j')
        echo ""

    ;;
    *)
        echo ""
    ;;
esac

read -p "Premere un tasto per continuare"
########## 23 ###############
clear
echo "INSTALLAZIONE SOFTWARE------------23

Thunderbird,evolution e kmail sono delle applicazioni per la gestione della posta elettronica.
Potete scegliere tra:

1)Thunderbird (ottimo per tutti i DE)
2)Kmail (per KDE)
3)Evolution (per GNOME)
4)Clawsmail (GTK+)


INFORMAZIONI AVANZATE
Verranno installati i pacchetti

1)thunderbird thunderbird-i18n-it

2)kdepim-kmail

3)evolution

4)claws-mail

Digitare il numero corrispondente all'alternativa scelta e Premere invio per installarla oppure Premere \"j\" e \"invio\"
per saltare questo passaggio"

read scelta

case $scelta in
    '1')
        pacman -S thunderbird  thunderbird-i18n-it --needed
        echo ""
    ;;
    '2')
        pacman -S kdepim-kmail --needed
        echo ""
    ;;
    '3')
        pacman -S evolution --needed
        echo ""
   ;;
   '4')
       pacman -S claws-mail --needed
       echo ""
  ;;
 'j')
        echo ""
    ;;
    *)
        echo ""
    ;;
esac

read -p "Premere un tasto per continuare"


########## 26 ###############
clear
echo "INSTALLAZIONE SOFTWARE-------------26

Pidgin e xchat sono due programmi utili per la messaggistica e la chat IRC.


1)Vorrei xchat e pidgin
2)Vorrei quassel e kopete

INFORMAZIONI AVANZATE
Verranno installati i seguenti pacchetti: pidgin, xchat per XFCE,GNOME,cinnamon,openbox ed E17
Verranno installati i seguenti pacchetti: quassel, kdenetwork-kopete, kdeplasma-addons-runners-kopete  per KDE

Digitare il numero corrispondente all'alternativa scelta e Premere invio per installarla oppure Premere \"j\" e \"invio\"
per saltare questo passaggio"

read scelta

case $scelta in
    '1')
        pacman -S xchat pidgin --needed
        echo ""
    ;;
    '2')
        pacman -S quassel kdenetwork-kopete kdeplasma-addons-runners-kopete --needed
        echo ""
    ;;

 'j')
        echo ""

    ;;
    *)
        echo ""
    ;;
esac

read -p "Premere un tasto per continuare"



########## 27 ###############
clear
echo "INSTALLAZIONE SOFTWARE-------------27

Transmission è uno dei piu semplici e popolari client torrent disponibili per GNU/Linux.È disponbile sia per KDE che per GNOME, cinnamon, openbox, XFCE ed e17
Ktorrent è un client torrent per KDE presente di default in molte distribuzioni con KDE.
Qbittorrent (solo AUR) è uno dei migliori client torrent in assoluto.Per KDE.
Deluge è un ottimo client torrent per GNOME,cinnamon,XFCE,openbox ed E17

1)Installare Transmission-gtk (per GNOME,XFCE ecc.)
2)Installare Transmission-qt (per KDE)
3)Installare Ktorrent (KDE)
4)Installare Qbittorent (KDE)
5)Installare Deluge (GNOME,XFCE ecc.)

INFORMAZIONI AVANZATE
Qbittorent proviene da AUR

digitare il numero corrispondente all'alternativa scelta e Premere invio per installarla oppure Premere \"j\" e \"invio\"
per saltare questo passaggio.Per usare l'opzione 'noconfirm' di yaourt con la scelta 4, dare '4a'"

  read scelta

case $scelta in
    '1')
        pacman -S transmission-gtk --needed
        echo ""
    ;;
    '2')
        pacman -S transmission-qt --needed
        echo ""
    ;;
    '3')
        pacman -S ktorrent --needed
        echo ""
    ;;
    '4')
        yaourt -S qbittorrent --needed
        echo ""
    ;;

    '4a')
         yaourt -S qbittorrent --needed --noconfirm
         echo ""
    ;;
    '5')
        pacman -S deluge --needed
        echo ""
    ;;

 'j')
        echo ""

    ;;
    *)
        echo ""
    ;;
esac

read -p "Premere un tasto per continuare"



########## 28 ###############
clear
echo "INSTALLAZIONE SOFTWARE-------------28

Un player multimediale è un programma che consente di visualizzare tutti i tipi di file audio e video.
 1)Parole è il lettore multimediale leggero e semplice sviluppato per l'ambiente grafico xfce
 2)Vlc è il lettore multimediale piu usato al mondo. Ottimo su qualsiasi DE
 3)Totem è il lettore multimediale dell'ambiente grafico gnome.
 4)Bangarang è un player multimediale per KDE.(solo AUR)
 5)Smplayer è un player leggero ma estremamente funzionale,ottimo su tutti i DE

INFORMAZIONI AVANZATE
Verranno installati i pacchetti

1)parole

2)vlc

3)totem

4)bangarang

5)smplayer smplayer-themes
'bangarang' proviene da AUR.

Digitare il numero corrispondente all'alternativa scelta e Premere invio per installarla oppure Premere \"j\" e \"invio\"
per saltare questo passaggio.Per usare l'opzione 'noconfirm' di yaourt per la scelta '4', dare '4a'  "
read scelta

case $scelta in
    '1')
        pacman -S parole --needed
        echo ""
    ;;
    '2')
        pacman -S vlc --needed
        echo ""
    ;;
    '3')
        pacman -S totem  --needed
        echo ""
    ;;
    '4')
        yaourt -S bangarang --needed
        echo ""
    ;;

    '4a')
        yaourt -S bangarang --needed --noconfirm
        echo ""
    ;;
    '5')
        pacman -S smplayer smplayer-themes --needed
        echo ""
    ;;

    'j')
        echo ""
    ;;
    *)
        echo ""
    ;;
esac

read -p "Premere un tasto per continuare"

########## 29 ###############
clear
echo "INSTALLAZIONE SOFTWARE-------------29

Vuoi installare un gestore di musica?

 1)gmusicbrowser è un programma leggero e semplice per la gestione delle librerie musicali. (SCELTA CONSIGLIATA PER XFCE).
 2)Banshee è un gestore delle librerie musicali semplice e completo per GNOME
 3)Rhythmbox è un media player ispirato ad iTunes e sviluppato per l'ambiente grafico GNOME.
 4)Clementine è un moderno gestore della musica basato su Amarok.Per KDE
 5)Amarok è uno dei migliori gestori musicali al mondo,sviluppato per KDE

 INFORMAZIONI AVANZATE
 Verranno installati i pacchetti

 1)gmusicbrowser

 2) banshee

 3) rhythmbox

 4) clementine

 5) amarok kdeplasma-addons-runners-audioplayercontrol
 gmusicbrowser proviene da AUR

Digitare il numero corrispondente all'alternativa scelta e Premere invio per installarla oppure Premere \"j\" e \"invio\"
per saltare questo passaggio.Per usare l'opzione 'noconfirm' di yaourt per la scelta '1', dare '1a'  "
read scelta

case $scelta in
    '1')
        yaourt -S gmusicbrowser --needed
        echo ""
    ;;
    '1a')
        yaourt -S gmusicbrowser --needed --noconfirm
        echo ""
    ;;
    '2')
        pacman -S banshee --needed
        echo ""
    ;;
    '3')
        pacman -S rhythmbox  --needed
        echo ""
    ;;
    '4')
        pacman -S clementine --needed
        echo ""
    ;;
    '5')
        pacman -S amarok kdeplasma-addons-runners-audioplayercontrol --needed
        echo ""
    ;;
    'j')
        echo ""
    ;;
    *)
        echo ""
    ;;
esac
read -p "Premere un tasto per continuare"

########## 30 ###############
clear
echo "INSTALLAZIONE SOFTWARE-------------30


IBus (Intelligent Input Bus) is an input method framework, a system for entering foreign characters.

Dare 'y' e invio per installarli oppure Premere \"j\" per saltare questo passaggio."

case $scelta in
    'y')
        yaourt -S ibus --needed
        echo ""
    ;;
    'j')
        echo ""
    ;;
    *)
        echo ""
    ;;
esac
read -p "Premere un tasto per continuare"

########## 31 ###############
clear
echo "INSTALLAZIONE SOFTWARE-------------31

E'possibile installare una suite di ufficio tre due alternative:
 1)LibreOffice è una suite che offre sei applicazioni ricche di funzionalità per tutte le necessità di produzione di documenti e elaborazione dati: Writer, Calc, Impress,
 Draw, Math e Base.(SCELTA CONSIGLIATA)
 2)Abiword e Gnumeric sono un alternativa leggera a libreoffice per GNOME.
 3)Calligra è una suite d'ufficio per KDE.

Si consiglia Libreoffice.

INFORMAZIONI AVANZATE
Si installeranno i seguenti pacchetti

1)libreoffice libreoffice-it witalian hunspell-it

2)abiword gnumeric

3)calligra calligra-l10n-it
'witalian' è disponibile solo su AUR

Digitare il numero corrispondente all'alternativa scelta e Premere invio per installarla oppure Premere \"j\" e \"invio\"
per saltare questo passaggio  "
read scelta

case $scelta in
    '1')
        yaourt -S libreoffice libreoffice-it witalian hunspell-it  --needed
        echo ""
    ;;
    '2')
        pacman -S abiword gnumeric --needed
        echo ""
    ;;
    '3')
        pacman -S calligra calligra-l10n-it --needed
        echo ""
    ;;
    'j')
        echo ""
    ;;
    *)
        echo ""
    ;;
esac
read -p "Premere un tasto per continuare"

########## 32 ###############
clear
echo "INSTALLAZIONE SOFTWARE-------------32

Desideri installare codecs, fonts di parti terze proprietarie, pacchetti opensource sostitutivi di java?
è consigliato installare i seguenti pacchetti per consentire la corretta visualizzazione di video, canzoni ecc...
In alcuni Paesi (non l'Italia) è vietata l'installazione di codecs proprietari, informati sulle leggi vigenti prima di installare questi pacchetti.
Durante l'installazione verrà chiesto di accettare delle licenze, scegli ok o accetto e prosegui.

INFORMAZIONI AVANZATE
Verranno installati i seguenti pacchetti: jre7-openjdk  flashplugin ttf-ms-fonts gstreamer0.10-good-plugins icedtea-web-java7
Alcuni pacchetti provengono da AUR

Premere '1' e invio per installarli oppure Premere \"j\" per saltare questo passaggio.Per usare l'opzione 'noconfirm' di yaourt, dare '1a' e invio"
  read scelta

case $scelta in
    '1')
        yaourt -S jre7-openjdk  ttf-ms-fonts gstreamer0.10-plugins flashplugin icedtea-web-java7 --needed
        echo ""
    ;;
    '1a')
        yaourt -S  jre7-openjdk ttf-ms-fonts gstreamer0.10-plugins flashplugin icedtea-web-java7 --needed --noconfirm
        echo ""
    ;;

    'j')
        echo ""
    ;;
    *)
        echo ""
    ;;
esac
read -p "Premere un tasto per continuare"


#########################
clear
echo "INSTALLAZIONE SOFTWARE-------------

Vuoi installare anche programmi per la sicurezza, per la pulizia sicura delle tracce?

Verranno installati i seguenti pacchetti:bleachbit, wipe e wipetrash per XFCE,GNOME.
Verranno installati i seguenti pacchetti:sweeper e wipe  per KDE

1)Vorrei bleachbit, wipe e wipetrash
2)Vorrei sweeper e wipe

INFORMAZIONI AVANZATE
Verranno installati i seguenti pacchetti

1) bleachbit wipe wipetrash

2) kdeutils-sweeper wipe
bleachbit è su AUR

Digitare il numero corrispondente all'alternativa scelta e Premere invio per installarla oppure Premere \"j\" e \"invio\"
per saltare questo passaggio.Per usare l'opzione 'noconfirm' di yaourt con la prima scelta,dare '1a' e invio  "
read scelta

case $scelta in
    '1')
        yaourt -S bleachbit wipe wipetrash --needed
        echo ""
    ;;
    '1a')
        yaourt -S bleachbit wipe wipetrash --needed --noconfirm
        echo ""
    ;;
    '2')
        pacman -S kdeutils-sweeper wipe --needed
        echo ""
    ;;

    'j')
        echo ""
    ;;

    *)
        echo ""
    ;;
esac
read -p "Premere un tasto per continuare"


########## 34 ###############
clear
echo "INSTALLAZIONE SOFTWARE-------------34

L'installazione di una antivirus (così come di un firewall) su linux è ritenuta superflua. Tuttavia, è buona regola installare un antivirus per evitare di essere portatori sani di virus che possono passare attraverso i nostri computer.
La presenza di un antivirus e di un firewall è obbligatoria per legge per determinate professioni ed imprese.

INFORMAZIONI AVANZATE
Verranno installati i seguenti pacchetti:clamtk firestarter

Premere '1' e invio  per installarli oppure Premere \"j\" per saltare questo passaggio.Per usare l'opzione 'noconfirm' di yaourt, dare '1a' e invio"

read scelta

case $scelta in
    '1')
        yaourt -S clamtk firestarter --needed
        echo ""
    ;;
    '1a')
        yaourt -S clamtk firestarter --needed --noconfirm
        echo ""
    ;;

    'j')
        echo ""
    ;;

    *)
        echo ""
    ;;

esac
read -p "Premere un tasto per continuare"
########## 35 ###############

clear
echo "INSTALLAZIONE WEB BROWSER-------------40

Un web browser consente la navigazione nel web.

 1)Mozilla Firefox è il web browser open source più conosciuto, particolarmente configurabile

 2)Chromium è il web browser open-source da cui deriva Google Chrome, ritenuto particolarmente veloce; (SCELTA CONSIGLIATA)

 3)Opera è uno dei dieci web browser più utilizzati al mondo.Estremamente versatile,potente e comodo,è ritenuto uno dei migliori browser al mondo.È,però,proprietario;

 4) Midori è un browser minimale basato su WebKitGtk;

 5)Qupzilla è un browser per KDE;

 6)Rekonq è un altro browser per KDE.

 INFORMAZIONI AVANZATE
 Verranno installati i seguenti pacchetti

 1)firefox firefox-i18n-it

 2)chromium

 3)opera opera-i18n-it

 4)midori midori-flash

 5)qupzilla

 6)rekonq

 Le scelte 3 e 4 fanno uso di Yaourt

Digitare il numero corrispondente all'alternativa scelta e Premere invio per installarla oppure Premere \"j\" e \"invio\"
per saltare questo passaggio.Per usare l'opzione 'noconfirm' di yaourt per le scelte '3' e '4', digitare '3a' o '4a' e Premere invio  "
read scelta

case $scelta in
    '1')
        pacman -S firefox firefox-i18n-it --needed
        echo ""
    ;;
    '2')
        pacman -S chromium --needed
        echo ""
    ;;
    '3')
        yaourt -S opera opera-i18n-it --needed
        echo ""
    ;;
    '3a')
        yaourt -S opera opera-i18n-it  --needed --noconfirm
        echo ""
    ;;
    '4a')
        yaourt -S midori midori-flash --needed --noconfirm
        echo ""
    ;;
    '5')
        pacman -S qupzilla --needed
    ;;
    '6')
        pacman -S rekonq --needed
    ;;
    'j')
        echo ""
    ;;
    *)
        echo ""
    ;;
esac
read -p "Premere un tasto per continuare"
#########################
clear
echo "INSTALLAZIONE TOR WEB BROWSER-------------

Tor-Browser, un browser “all-in-one” che ci permette di navigare in modo sicuro e anonimo su internet.
Questo Browser non è altro che una versione modificata di Firefox che però potremo utilizzare solamente
per navigare attraverso i nodi Tor.

INFORMAZIONI AVANZATE
Verranno installati i seguenti pacchetti

 1.tor-browser-it
 2.tor-browser-en

 Le scelte 1 (-it) e 2 (-en) fanno uso di Yaourt

Digitare il numero corrispondente all'alternativa scelta e Premere invio per installarla oppure Premere \"j\" e \"invio\"
per saltare questo passaggio."

case $scelta in
    '1')
        yaourt -S tor-browser-it  --needed --noconfirm
        echo ""
    ;;
    '2')
        yaourt -S tor-browser-en --needed --noconfirm
        echo ""
    ;;

    'j')
        echo ""
    ;;
    *)
        echo ""
    ;;
esac
read -p "Premere un tasto per continuare"
########################
clear
echo "INSTALLAZIONE SOFTWARE------------

Vuoi installare il gestore dell'ora ntp?

INFORMAZIONI AVANZATE
Sarà installato il pacchetto 'ntp'.Verranno aggiunte delle stringhe a /etc/ntp.conf.Sarà abilitato l'avvio automatico ad ogni avvio di ntpd
Premere un tasto per installarlo oppure Premere \"j\" per saltare questo passaggio."

read -n1 a
a=`echo $a | tr '[A-Z]' '[a-z]'`
if [ "$a" != "j" ]; then
    echo ""
    pacman -S ntp
echo "
server 0.it.pool.ntp.org iburst
server 1.it.pool.ntp.org iburst
server 2.it.pool.ntp.org iburst
server 3.it.pool.ntp.org iburst" | tee -a /etc/ntp.conf

systemctl enable ntpd.service

read -p "Premere un tasto per continuare"
fi
########################
clear
echo "INSTALLAZIONE SOFTWARE-------------

Occorre avviare automaticamente alcuni demoni
come syslog-ng e cronie (vecchio crond)
Vuoi procedere?

INFORMAZIONI AVANZATE
Verrà installato il pacchetto 'syslog-ng'.sarànno abilitati all'avvio i servizi 'cronie' e 'syslog-ng'

Premere un tasto per continuare oppure Premere \"j\" per saltare questo passaggio."

read -n1 a
a=`echo $a | tr '[A-Z]' '[a-z]'`
if [ "$a" != "j" ]; then
    echo ""
    pacman -S syslog-ng --needed

    systemctl enable cronie.service

    systemctl enable syslog-ng.service

read -p "Premere un tasto per continuare"
fi

###################################
clear
echo "INSTALLAZIONE SOFTWARE -------------
Vuoi installare networkmanager? è un tool che permette di collegarsi a internet.
Verrà installato anche un tool per permetterti di usare network manager in via grafica.

1)Voglio solo network manager senza altri tool
2)Voglio network manager per KDE
3)Voglio network manager per Xfce
4)Voglio network manager per openbox
5)Voglio network manager per GNOME e gli altri

INFORMAZIONI AVANZATE:
Sarà installato il pacchetto 'networkmanager'.
Tale tool sarà anche abilitato per l'avvio automatico.

In più, saranno installati i tool

2)kdeplasma-applets-networkmanagement
3)network-manager-applet , xfce4-notifyd
4)network-manager-applet , xfce4-notifyd  gnome-icon-theme
5)network-manager-applet , gnome-icon-theme

Digitare il numero corrispondente all'alternativa scelta e Premere invio per installarla oppure Premere \"j\" e \"invio\"
per saltare questo passaggio."
read scelta

case $scelta in
    '1')
        pacman -S networkmanager --needed

        systemctl enable NetworkManager.service
        echo ""
    ;;
    '2')
       pacman -S networkmanager kdeplasma-applets-networkmanagement --needed

        systemctl enable NetworkManager.service
        echo ""
    ;;
    '3')  pacman -S networkmanager  network-manager-applet xfce4-notifyd--needed

        systemctl enable NetworkManager.service

        echo ""
    ;;
    '4')
         pacman -S networkmanager xfce4-notifyd gnome-icon-theme network-manager-applet --needed

        systemctl enable NetworkManager.service
        echo ""
    ;;
    '5')
         pacman -S networkmanager gnome-icon-theme network-manager-applet  --needed

        systemctl enable NetworkManager.service
        echo ""
    ;;

    'j')
        echo ""
    ;;
    *)
        echo ""
    ;;
esac
read -p "Premere un tasto per continuare"
######## 44 ########################
clear
echo "INSTALLAZIONE SOFTWARE-----------------44

Vuoi installare wine?Si tratta di un tool che permette di eseguire diverse applicazioni per Microsoft Windows su GNU/Linux.
Puoi scegliere tra:

1)Installazione base di wine             (wine)

2)Installazione completa di wine         (wine wine_gecko  winetricks playonlinux)

3)Installazione completa di wine per KDE (wine wine_gecko  winetricks playonlinux q4wine).Comprende l'utilissimo tool in qt \"q4wine\"

Potrebbe essere necessario configurare succesivamente wine.
Digitare il numero corrispondente all'alternativa scelta e Premere invio per installarla oppure Premere \"j\" e \"invio\"
per saltare questo passaggio  "

read scelta

case $scelta in
    '1')
       pacman -S wine --needed
        echo ""
    ;;
    '2')
        pacman -S wine wine_gecko  winetricks playonlinux --needed
        echo ""
    ;;
    '3')
        pacman -S wine wine_gecko q4wine winetricks playonlinux --needed
        echo ""
    ;;
    'j')
        echo ""
    ;;
    *)
        echo ""
    ;;
esac
read -p "Premere un tasto per continuare"

######## 45 ########################
clear
echo "INSTALLAZIONE SOFTWARE-----------------45

Vuoi installare Skype? Si tratta di un tool proprietario che permette di effettuare chiamate e videochiamate gratuite verso altri pc con skype e chiamate a pagamento verso cellulari.
Skype-call-recorder è un tool che permette di registrare le conversazioni effettuate con Skype.È in qt,quindi consigliato per KDE.
Puoi scegliere tra:

1)Installazione di Skype                          (skype)
2)Installazione di Skype e Skype-call-recorder    (skype skype-call-recorder)

Digitare il numero corrispondente all'alternativa scelta e Premere invio per installarla oppure Premere \"j\" e \"invio\"
per saltare questo passaggio  "

read scelta

case $scelta in
    '1')
       pacman -S skype --needed
        echo ""
    ;;
    '2')
        pacman -S skype skype-call-recorder --needed
        echo ""
    ;;
    'j')
        echo ""
    ;;
    *)
        echo ""
    ;;
esac
read -p "Premere un tasto per continuare"

######## 46 ########################
clear
echo "INSTALLAZIONE SOFTWARE-----------------46

Vuoi installare alsa-utils? Si tratta di un pacchetto aggiuntivo per alsa che permette di regolare il volume.Contiene il noto tool 'alsamixer'.
Questo passaggio è consigliato.

INFORMAZIONI AVANZATE
Verrà installato il pacchetto 'alsa-utils'
Premere invio per continuare oppure \"j\" per saltare il passaggio."

read -n1 a
a=`echo $a | tr '[A-Z]' '[a-z]'`
if [ "$a" != "j" ]; then

pacman -S alsa-utils --needed

read -p "Premere invio per continuare"
fi

######## 47 ########################
clear
echo " INSTALLAZIONE SOFTWARE-----------------47

Vuoi installare \"downgrade\"? Si tratta di un pacchetto che permette di effettuare il downgrade di un pacchetto nel caso in cui la nuova versione non funzionasse.
Può effettura il downgrade sia nella cache che su ARM, una sorta di cache online che permette di installare i pacchetti che aveva Arch in una data scelta.
Si tratta di un tool a riga di comando, eseguibile quindi su qualsiasi DE o WM

INFORMAZIONI AVANZATE
Verrà installato il pacchetto 'downgrade', proveniente da AUR

Digitare '1' e invio per installarlo oppure Premere \"j\" per saltare questo passaggio.Per usare l'opzione 'noconfirm' di yaourt, dare '1a' e invio"
read scelta
case $scelta in
    '1')
        yaourt -S downgrade  --needed
        echo ""
    ;;
    '1a')
        yaourt -S downgrade   --noconfirm --needed
        echo ""
    ;;
    'j')
        echo ""
    ;;
    *)
        echo ""
    ;;
esac
read -p "Premere un tasto per continuare"

clear
read -p "[*] Premere un tasto per continuare"
###############################################################################
###############################################################################
# install additional packages
if [[ "$install_packages" = 'yes' ]]; then
	message 'Installing additional packages..'
	pacman_install ${packages[@]} || :
fi

# configure system
configure_system

# install bootloader
install_bootloader

# unmount filesystems
if [[ "$unmount" = 'yes' ]]; then
	message 'Unmounting filesystems..'
	umount -R /mnt
	## close encrypted volume
	[[ "$manual_part" = 'no' && "$home" = 'yes' && "$encrypt_home" = 'yes' ]] &&
	 cryptsetup close home
else
	message 'Please unmount the targeted filesystems before rebooting.'
fi

# finish
printf "$RED"
cat << EOF
---------------------------------------
        Installation completed!
     Reboot the computer: # reboot
---------------------------------------
EOF
printf "$ALL_OFF"

exit 0
